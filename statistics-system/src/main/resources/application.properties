# #######################################################
# LOGGING
# #######################################################
logging.level.root = INFO

# #######################################################
# SERVER
# #######################################################
server.port = 9003

# #######################################################
# ACTIVE MQ
# #######################################################
spring.activemq.broker-url = tcp://localhost:61616
spring.activemq.user = admin
spring.activemq.password = admin

# #######################################################
# JPA/DATABASE
# #######################################################
spring.jpa.hibernate.ddl-auto = validate
flyway.clean-on-validation-error = true

# H2 provides a web console where we can execute SQL. For development
# purposes, we enable this console. It can be found at:
#
#       http://localhost:9003/h2-console
#
# JDBC URL: jdbc:h2:file:~/statistic_system
#
spring.h2.console.enabled = true

spring.datasource.url=jdbc:h2:file:~/statistic_system
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver

# We can use Hibernate in order to create the SQL scripts for
# our entities based on their JPA annotations. Use the following
# properties to do so.
#
# spring.jpa.hibernate.ddl-auto = create-drop
# spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
# spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
# spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql